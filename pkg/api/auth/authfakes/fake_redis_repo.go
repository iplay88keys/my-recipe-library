// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"sync"

	"github.com/iplay88keys/recipe-box/pkg/api/auth"
	"github.com/iplay88keys/recipe-box/pkg/token"
)

type FakeRedisRepo struct {
	RetrieveTokenDetailsStub        func(*token.AccessDetails) (int64, error)
	retrieveTokenDetailsMutex       sync.RWMutex
	retrieveTokenDetailsArgsForCall []struct {
		arg1 *token.AccessDetails
	}
	retrieveTokenDetailsReturns struct {
		result1 int64
		result2 error
	}
	retrieveTokenDetailsReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRedisRepo) RetrieveTokenDetails(arg1 *token.AccessDetails) (int64, error) {
	fake.retrieveTokenDetailsMutex.Lock()
	ret, specificReturn := fake.retrieveTokenDetailsReturnsOnCall[len(fake.retrieveTokenDetailsArgsForCall)]
	fake.retrieveTokenDetailsArgsForCall = append(fake.retrieveTokenDetailsArgsForCall, struct {
		arg1 *token.AccessDetails
	}{arg1})
	fake.recordInvocation("RetrieveTokenDetails", []interface{}{arg1})
	fake.retrieveTokenDetailsMutex.Unlock()
	if fake.RetrieveTokenDetailsStub != nil {
		return fake.RetrieveTokenDetailsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.retrieveTokenDetailsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRedisRepo) RetrieveTokenDetailsCallCount() int {
	fake.retrieveTokenDetailsMutex.RLock()
	defer fake.retrieveTokenDetailsMutex.RUnlock()
	return len(fake.retrieveTokenDetailsArgsForCall)
}

func (fake *FakeRedisRepo) RetrieveTokenDetailsCalls(stub func(*token.AccessDetails) (int64, error)) {
	fake.retrieveTokenDetailsMutex.Lock()
	defer fake.retrieveTokenDetailsMutex.Unlock()
	fake.RetrieveTokenDetailsStub = stub
}

func (fake *FakeRedisRepo) RetrieveTokenDetailsArgsForCall(i int) *token.AccessDetails {
	fake.retrieveTokenDetailsMutex.RLock()
	defer fake.retrieveTokenDetailsMutex.RUnlock()
	argsForCall := fake.retrieveTokenDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRedisRepo) RetrieveTokenDetailsReturns(result1 int64, result2 error) {
	fake.retrieveTokenDetailsMutex.Lock()
	defer fake.retrieveTokenDetailsMutex.Unlock()
	fake.RetrieveTokenDetailsStub = nil
	fake.retrieveTokenDetailsReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeRedisRepo) RetrieveTokenDetailsReturnsOnCall(i int, result1 int64, result2 error) {
	fake.retrieveTokenDetailsMutex.Lock()
	defer fake.retrieveTokenDetailsMutex.Unlock()
	fake.RetrieveTokenDetailsStub = nil
	if fake.retrieveTokenDetailsReturnsOnCall == nil {
		fake.retrieveTokenDetailsReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.retrieveTokenDetailsReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeRedisRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.retrieveTokenDetailsMutex.RLock()
	defer fake.retrieveTokenDetailsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRedisRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.RedisRepo = new(FakeRedisRepo)
