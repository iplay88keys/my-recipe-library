// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"net/http"
	"sync"

	"github.com/iplay88keys/my-recipe-library/pkg/api/auth"
	"github.com/iplay88keys/my-recipe-library/pkg/token"
)

type FakeTokenService struct {
	ValidateTokenStub        func(*http.Request) (*token.AccessDetails, error)
	validateTokenMutex       sync.RWMutex
	validateTokenArgsForCall []struct {
		arg1 *http.Request
	}
	validateTokenReturns struct {
		result1 *token.AccessDetails
		result2 error
	}
	validateTokenReturnsOnCall map[int]struct {
		result1 *token.AccessDetails
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenService) ValidateToken(arg1 *http.Request) (*token.AccessDetails, error) {
	fake.validateTokenMutex.Lock()
	ret, specificReturn := fake.validateTokenReturnsOnCall[len(fake.validateTokenArgsForCall)]
	fake.validateTokenArgsForCall = append(fake.validateTokenArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("ValidateToken", []interface{}{arg1})
	fake.validateTokenMutex.Unlock()
	if fake.ValidateTokenStub != nil {
		return fake.ValidateTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.validateTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenService) ValidateTokenCallCount() int {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	return len(fake.validateTokenArgsForCall)
}

func (fake *FakeTokenService) ValidateTokenCalls(stub func(*http.Request) (*token.AccessDetails, error)) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = stub
}

func (fake *FakeTokenService) ValidateTokenArgsForCall(i int) *http.Request {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	argsForCall := fake.validateTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenService) ValidateTokenReturns(result1 *token.AccessDetails, result2 error) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = nil
	fake.validateTokenReturns = struct {
		result1 *token.AccessDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenService) ValidateTokenReturnsOnCall(i int, result1 *token.AccessDetails, result2 error) {
	fake.validateTokenMutex.Lock()
	defer fake.validateTokenMutex.Unlock()
	fake.ValidateTokenStub = nil
	if fake.validateTokenReturnsOnCall == nil {
		fake.validateTokenReturnsOnCall = make(map[int]struct {
			result1 *token.AccessDetails
			result2 error
		})
	}
	fake.validateTokenReturnsOnCall[i] = struct {
		result1 *token.AccessDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.TokenService = new(FakeTokenService)
